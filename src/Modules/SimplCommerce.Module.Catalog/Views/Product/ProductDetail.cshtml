@using System.Globalization

@model SimplCommerce.Module.Catalog.ViewModels.ProductDetail

@{
    ViewBag.Title = Model.Name;
}

@section head
{
    <link href="~/lib/smoothproducts/css/smoothproducts.css" rel="stylesheet" />
    <link href="~/css/product-detail.css" rel="stylesheet" />
}

<div>
    <ol class="breadcrumb">
        <li><a href="~/">Home</a></li>
        @if (Model.Categories.Any())
        {
            @await Component.InvokeAsync("CategoryBreadcrumb", new { categoryIds = Model.Categories.Select(x => x.Id) })
        }
        <li><span class="active">@Model.Name</span></li>
    </ol>
</div>

<div class="product-detail">
    <div class="row">
        <div class="col-md-6">
            <div class="sp-wrap">
                @foreach (var image in Model.Images)
                {
                    <a href="@image.Url">
                        <img src="@image.ThumbnailUrl" alt="" />
                    </a>
                }
            </div>
        </div>
        <div class="col-md-6">
            <div class="product-name">
                <h1 class="">@Model.Name</h1>
            </div>
            <ul class="list-inline product-ratings margin-bottom-30">
                <li><i class="rating-selected fa fa-star"></i></li>
                <li><i class="rating-selected fa fa-star"></i></li>
                <li><i class="rating-selected fa fa-star"></i></li>
                <li><i class="rating fa fa-star"></i></li>
                <li><i class="rating fa fa-star"></i></li>
                <li class="product-review-list">
                    <span>(1) <a href="#">Review</a> | <a href="#"> Add Review</a></span>
                </li>
            </ul>
            <div class="product-short-desc">@Html.Raw(Model.ShortDescription)</div>
            <form>
                <div class="product-price">
                    @if (Model.HasVariation)
                    {
                        foreach (var variant in Model.Variations)
                        {
                            var hidden = variant != Model.Variations.First() ? "collapse" : "";
                            <div class="variation-price @variant.NormalizedName @hidden">
                                <h3>@variant.Price.ToString("C")</h3>
                                @if (variant.OldPrice.HasValue && variant.OldPrice.Value > variant.Price)
                                {
                                    <p class="product-price-regular">@variant.OldPrice.Value.ToString("c")</p>
                                    <p class="product-price-saving">You save @((variant.Price - variant.OldPrice.Value).ToString("C")) (-@(100 - Math.Round((variant.Price / variant.OldPrice.Value) * 100, 0))%)</p>
                                }
                                <input type="hidden" name="@(variant.NormalizedName)Id" value="@variant.Id" />
                            </div>
                        }

                        <input type="hidden" name="productId" value="@Model.Variations.First().Id" />
                    }
                    else
                    {
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <h3>@Model.Price.ToString("C")</h3>
                        if (Model.OldPrice.HasValue && Model.OldPrice.Value > Model.Price)
                        {
                            <p class="product-price-regular">@Model.OldPrice.Value.ToString("c")</p>
                            <p class="product-price-saving">You save @((Model.Price - Model.OldPrice.Value).ToString("C")) (-@(100 - Math.Round((Model.Price / Model.OldPrice.Value) * 100, 0))%)</p>
                        }
                    }
                </div>

                @if (Model.HasVariation)
                {
                    <div class="product-attrs">
                        @foreach (var option in Model.AvailableOptions)
                        {
                            <div>
                                <h4>@option.OptionName </h4>
                                <ul class="list-inline product-attr-options">
                                    @foreach (var value in option.Values)
                                    {
                                        var shouldChecked = Model.Variations.First().Options.Any(x => x.Value == value);
                                        <li>
                                            <input type="radio" value="@value" checked="@shouldChecked" name="@option.OptionName" />
                                            <label>@value</label>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                }
                <div class="add-to-cart">
                    <div class="product-quantity">
                        <button type="button" class="quantity-button" name="subtract" value="-">-</button>
                        <input type="text" class="quantity-field" readonly="readonly" name="qty" value="1">
                        <button type="button" class="quantity-button" name="add" value="+">+</button>
                    </div>

                    <button type="button" class="btn btn-lg btn-add-cart">Add to Cart</button>
                </div>
            </form>
            <div>
                <ul class="list-inline add-to-wishlist">
                    <li class="wishlist-in">
                        <i class="fa fa-heart"></i>
                        <a href="#">Add to Wishlist</a>
                    </li>
                    <li class="compare-in">
                        <i class="fa fa-exchange"></i>
                        <a href="#">Add to Compare</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    @if (!String.IsNullOrWhiteSpace(Model.Description))
    {
        <div>
            <h3>Product detail</h3>
            @Html.Raw(Model.Description)
        </div>
    }

    @if (!String.IsNullOrWhiteSpace(Model.Specification))
    {
        <div>
            <h3>Product specification</h3>
            @Html.Raw(Model.Specification)
        </div>
    }
    @if (Model.Attributes.Any())
    {
        <div>
            <h3>Product specification</h3>
            <table class="table table-striped">
                @foreach (var attribute in Model.Attributes)
                {
                    <tr>
                        <td>@attribute.Name</td>
                        <td>@attribute.Value</td>
                    </tr>
                }
            </table>
        </div>
    }
</div>

@section scripts
{
    <script src="~/lib/smoothproducts/js/smoothproducts.js"></script>
    <script src="~/catalog/product-detail.js"></script>
}
